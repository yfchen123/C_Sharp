1. The two require parts of Language for INtegrated Queries are extension methods (examples are Where, OrderBy and Select), 
and LINQ providers (LINQ to Objects for processing in-memory objects, LINQ to Entities for processing data stored in external 
databases and modeled with EF Core, and LINQ to XML for processing data stored as XML.).

2. You would use the Select LINQ extension method to return a subset of properties of a type. 

3. You would use the Single LINQ extension method to filter a sequence. 

4. Five LINQ extension methods for aggregation are: Average, Sum, Min, Max, and Count.

5. The Select method selects one value from a collection, the SelectMany method many values from the same collection. 

6. IQueryable<T> is intended for querying data that is not in memory, whereas IEnumerable<T> is intended for querying data that is 
in the memory. You can switch between the two by calling AsQueryable() method on an IEnumberable<T> or calling the AsEnumerable() 
method on an IQueryable<T>.

7. The last parameter T in generic Func delegates like Func<T1, T2, T> represent the return type of the function.

8. The benefit of LINQ functions that end with OrDefault is that if a value is not intialized it will assign a default value 
rather then let it be null.

9. Query Comprehension syntax is optional because they are aliases for LINQ extension methods, so if you don't have them you can 
still use the LINQ extension methods without aliases.

10. You create your own LINQ extension methods by adding extension methods to the IEnumerable<T> interface.
